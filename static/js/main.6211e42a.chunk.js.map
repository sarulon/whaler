{"version":3,"sources":["lib.ts","Canvas.tsx","NodeViewer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getHierarchy","data","width","height","h","d3","id","d","parentId","substring","lastIndexOf","each","node","children","value","summed","sum","sort","a","b","size","round","displayNode","base","fileSize","basename","colorHash","ColorHash","getColor","filename","hex","extname","drawNode","context","strokeStyle","lineWidth","fill","save","beginPath","rect","x0","y0","x1","y1","fillStyle","stroke","restore","drawTree","root","leaves","forEach","leaf","getPixelLookup","lookup","Array","map","row","y","x","Canvas","pixelLookup","setHovered","hovered","selected","setSelected","canvasRef","useRef","React","useState","setContext","prevSelected","ref","useEffect","current","usePrevious","renderCtx","getContext","getNode","event","canvas","getBoundingClientRect","scaleX","scaleY","loc","Math","clientX","left","clientY","top","style","textAlign","onClick","onMouseMove","border","cursor","memo","defaultButtonStyle","fontFamily","NodeViewer","treeWalker","r","recomputeTree","open","subtreeCallback","ownerNode","isOpen","startsWith","scrollToItem","getNodeData","isLeaf","undefined","isOpenByDefault","parent","name","nestingLevel","depth","isSelected","parentMeta","child","f","itemSize","setOpen","alignItems","display","marginLeft","fontWeight","backgroundColor","type","color","textDecoration","DATA_FILE","App","setData","setPixelLookup","err","setErr","console","log","axios","get","resp","status","text","length","df","load","flexDirection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAQaA,EAI2B,SAACC,EAAMC,EAAOC,GACpD,IAAMC,EAAIC,MAEPC,IAAG,SAACC,GAAD,OAAOA,EAAED,MACZE,UAAS,SAACD,GAAD,OAAOA,EAAED,GAAGG,UAAU,EAAGF,EAAED,GAAGI,YAAY,QAH5CL,CAGmDJ,GAE7DG,EAAEO,MAAK,SAACC,GACFA,EAAKC,WACPD,EAAKX,KAAKa,MAAQ,MAItB,IAAMC,EAASX,EACZY,KAAI,SAACT,GAAD,OAAiB,IAAVA,EAAEO,SACbG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEL,MAASI,EAAEJ,SAO/B,OAL+CT,MAE5Ce,KAAK,CAAClB,EAAOC,IAEbkB,OAAM,EAJsChB,CAIhCU,IAiBJO,EAAc,SAACV,EAA6BW,GAA9B,iBACrBC,IAASZ,EAAKE,OADO,aACKS,EAAOE,mBAASb,EAAKX,KAAKK,IAAMM,EAAKX,KAAKK,KAEpEoB,EAAY,I,OAAIC,GAChBC,EAAW,SAACC,GAChB,OAAOH,EAAUI,IAAIC,kBAAQF,KAGlBG,EAAW,SACtBpB,EACAqB,GAII,IAHJC,EAGG,uDAHmB,kBACtBC,EAEG,uDAFiB,GACpBC,IACG,yDACHH,EAAQI,OACRJ,EAAQK,YACRL,EAAQM,KACN3B,EAAK4B,GAAKL,EACVvB,EAAK6B,GAAKN,EACVvB,EAAK8B,GAAK9B,EAAK4B,GAAK,EAAIL,EACxBvB,EAAK+B,GAAK/B,EAAK6B,GAAK,EAAIN,GAGtBC,IACFH,EAAQW,UAAYhB,EAAShB,EAAKX,KAAKK,IACvC2B,EAAQG,QAEVH,EAAQE,UAAYA,EACpBF,EAAQC,YAAcA,EACtBD,EAAQY,SACRZ,EAAQa,WAGGC,EAAW,SACtBC,EACAf,GAEee,EAAKC,SAEbC,SAAQ,SAACC,GACdnB,EAASmB,EAAMlB,OAINmB,EAAiB,SAACnD,GAC7B,IAAMgD,EAAShD,EAAKgD,SAEdI,EAA+C,YAChD,IAAIC,MAAMrD,EAAKyC,GAAKzC,EAAKuC,KAC5Be,KAAI,SAACC,GAAD,OAAS,IAAIF,MAAwCrD,EAAK0C,GAAK1C,EAAKwC,OAU1E,OARAQ,EAAOC,SAAQ,SAACC,GACd,IAAK,IAAIM,EAAIN,EAAKV,GAAIgB,EAAIN,EAAKR,GAAIc,IACjC,IAAK,IAAIC,EAAIP,EAAKX,GAAIkB,EAAIP,EAAKT,GAAIgB,IACjCL,EAAOI,GAAGC,GAAKP,KAKdE,GCnFT,IAAMM,EAAuB,SAAC,GASvB,IARL1D,EAQI,EARJA,KACA2D,EAOI,EAPJA,YAEAC,GAKI,EANJC,QAMI,EALJD,YACAE,EAII,EAJJA,SACAC,EAGI,EAHJA,YACA7D,EAEI,EAFJA,OACAD,EACI,EADJA,MAEM+D,EAAYC,iBAA0B,MADxC,EAE0BC,IAAMC,SAClC,MAHE,mBAEGnC,EAFH,KAEYoC,EAFZ,KAMEC,EAvBR,SAAqBxD,GACnB,IAAMyD,EAAML,iBAAgD,MAI5D,OAHAM,qBAAU,WACRD,EAAIE,QAAU3D,KAETyD,EAAIE,QAkBUC,CAAYX,GAEjCS,qBAAU,WACHvC,IAIDqC,GACFvB,EAASuB,EAAcrC,GAGrB8B,GACF/B,EAAS+B,EAAU9B,EAAS,SAAU,GAAK,MAE5C,CAACqC,EAAcP,EAAU9B,IAE5BuC,qBAAU,WACR,GAAIP,EAAUQ,QAAS,CACrB,IAAME,EAAYV,EAAUQ,QAAQG,WAAW,MAE3CD,GACFN,EAAWM,GAIX1C,GAAWhC,GACb8C,EAAS9C,EAAMgC,KAEhB,CAACA,EAAShC,EAAME,EAAQD,IAE3B,IAAM2E,EAAU,SAACC,GAEf,IAAMC,EAASd,EAAUQ,QACnBlC,EAAOwC,EAAOC,wBACdC,EAASF,EAAO7E,MAAQqC,EAAKrC,MAC7BgF,EAASH,EAAO5E,OAASoC,EAAKpC,OAC9BgF,EACDC,KAAK/D,OAAOyD,EAAMO,QAAU9C,EAAK+C,MAAQL,GADxCE,EAEDC,KAAK/D,OAAOyD,EAAMS,QAAUhD,EAAKiD,KAAON,GAGvC1B,EAAMI,EAAYuB,GACxB,GAAK3B,EAKL,OADaA,EAAI2B,IAInB,OACE,qBACEM,MAAO,CACLC,UAAW,UAFf,SAKE,wBACEC,QAAS,SAACb,GACRd,EAAYa,EAAQC,IAAU,OAEhCc,YAAa,SAACd,GACZjB,EAAWgB,EAAQC,IAAU,OAE/BxE,GAAG,SACHiE,IAAKN,EACL/D,MAAOA,EACPC,OAAQA,EACRsF,MAAO,CACLI,OAAQ,iBACRC,OAAQ,gBAOH3B,MAAM4B,KAAKpC,G,8BC/FpBqC,EAAqB,CAAEC,WAAY,eAcnCC,EAAa,SAAC,GAMJ,IAAD,WAsFHC,GA3FVlG,EAKa,EALbA,KACAE,EAIa,EAJbA,OACAD,EAGa,EAHbA,MACA6D,EAEa,EAFbA,SACAC,EACa,EADbA,YAEMoC,EAAIlC,iBAAsB,MAEhCM,qBAAU,WACoB,IAAD,EAAvB4B,EAAE3B,SAAWV,IACf,UAAAqC,EAAE3B,eAAF,SAAW4B,cAAX,eACGpG,EAAKA,KAAKK,GAAK,CACdgG,MAAM,EACNC,gBAAiB,SAAC3F,EAAM4F,GACtB5F,EAAK6F,OAAS1C,EAAS9D,KAAKK,GAAGoG,WAAW9F,EAAKX,KAAKK,KAAOyD,EAAS9D,KAAKK,KAAOM,EAAKX,KAAKK,OAIhG8F,EAAE3B,QAAQkC,aAAa5C,EAAS9D,KAAKK,OAEtC,CAACyD,EAAU9D,IAEd,IAAM2G,EAAc,SAClBhG,GADkB,MAEuB,CACzCX,KAAM,CACJK,GAAIM,EAAKX,KAAKK,GACduG,YAA0BC,IAAlBlG,EAAKC,SACbkG,gBAAiC,OAAhBnG,EAAKoG,OACtBC,KAAM3F,EAAYV,GAAM,GACxBsG,aAActG,EAAKuG,MACnBC,aAAcrD,GAAYA,EAAS9D,KAAKK,KAAOM,EAAKX,KAAKK,GACzDM,QAEFA,SAyDF,SAAUuF,IAAV,6EACE,OADF,SACQS,EAAY3G,GADpB,OAIuB,YAJvB,iBAIUoH,EAJV,qBAMwBA,EAAWzG,KAAKC,UAAY,IANpD,yDAOM,OADSyG,EANf,kBAOYV,EAAYU,GAPxB,sHAAAC,IAAA,gGAWA,OACE,cAAC,IAAD,CACEpB,WAAYA,EACZqB,SAAU,GACVrH,OAAQA,EACRD,MAAOA,EACPqE,IAAK6B,EALP,SAhEE,SAAC,GAAD,QACFnG,KAAQ4G,EADN,EACMA,OAAQI,EADd,EACcA,KAAMC,EADpB,EACoBA,aAAcE,EADlC,EACkCA,WAAYxG,EAD9C,EAC8CA,KAChD6F,EAFE,EAEFA,OACAhB,EAHE,EAGFA,MAHE,EAIFgC,QAJE,OAMF,sBACEhC,MAAK,2BACAA,GADA,IAEHiC,WAAY,SACZC,QAAS,OACTC,WAA2B,GAAfV,GAAqBL,EAAS,GAAK,GAC/CgB,WAAYT,EAAa,OAAS,SAClCU,gBAAiBV,EAAa,SAAW,UAP7C,WAUIP,GACA,8BACE,wBACEkB,KAAK,SACLpC,QAAS,WAAO,IAAD,EACb,UAAAS,EAAE3B,eAAF,SAAW4B,cAAX,eACGzF,EAAKX,KAAKK,GAAK,CACdgG,MAAOG,EACPF,gBAAiB,SAAC3F,EAAM4F,GAClB5F,IAAS4F,IACX5F,EAAK6F,QAAS,QAMxBhB,MAAOO,EAdT,SAgBGS,EAAS,IAAM,QAItB,qBACEd,QAAS,kBAAM3B,EAAYpD,IAC3B6E,MAAO,CACLmC,WAAY,GACZ9B,OAAQ,UACRkC,MAAO,OACPC,eAAgB,aANpB,SASGhB,WA6BM9C,MAAM4B,KAAKG,G,QChJpBgC,EAAY,SAKLC,EAAM,WAAO,IAAD,EAInBhE,IAAMC,SAAkD,MAJrC,mBAErBnE,EAFqB,KAGrBmI,EAHqB,OAKejE,IAAMC,SAE1C,MAPqB,mBAKhBR,EALgB,KAKHyE,EALG,OAQDlE,IAAMC,SAAwB,MAR7B,mBAQhBkE,EARgB,KAQXC,EARW,OAYnBpE,IAAMC,SAAkD,MAZrC,mBAUrBN,EAVqB,KAWrBD,EAXqB,OAgBnBM,IAAMC,SAAkD,MAhBrC,mBAcrBL,EAdqB,KAerBC,EAfqB,KA6CvB,OA3BAQ,qBAAU,WACRgE,QAAQC,IAAI1E,KACX,CAACA,IAEJS,qBAAU,YACE,uCAAG,kCAAAtD,EAAA,sEACQwH,IAAMC,IAAIT,GADlB,UAES,OADdU,EADK,QAEFC,OAFE,uBAGTN,EAAO,iBAAD,OAAkBL,EAAlB,wBAA2CU,EAAKC,SAH7C,0BAMLC,EAAOF,EAAK3I,QAEd,QADEM,EAAIF,IAAA,qBAA0ByI,WAChC,IAACvI,OAAD,EAACA,EAAGwI,SAAUxI,EAAEwI,OAAS,IAC3BR,EAAO,wCAAD,OAAyCL,IAE3Cc,EAAKhJ,EACRO,EArCY,IADC,KA0ChB8H,EAAejF,EAAe4F,IAC9BZ,EAAQY,GAjBG,4CAAH,qDAmBVC,KACC,IAECX,EACK,mCAAGA,IAGNrI,GAAQ2D,EAKZ,cAAC,IAAD,CACE6B,MAAO,CAAEtF,OAAQ,qBAAsBD,MAAO,sBADhD,SAGG,YAAuB,EAApBC,OAAqB,IAAbD,EAAY,EAAZA,MACV,OACE,sBAAKuF,MAAO,CAAEkC,QAAS,OAAQuB,cAAe,UAA9C,UACE,sBAAKzD,MAAO,CAAEkC,QAAS,QAAvB,UACE,cAAC,EAAD,CACE1H,KAAMA,EACNE,OAlEM,IAmEND,MAAOA,EAAQ,GACf6D,SAAUA,EACVC,YAAaA,IAEf,cAAC,EAAD,CACE/D,KAAMA,EACN2D,YAAaA,EACbG,SAAUA,EACVC,YAAaA,EACbF,QAAS,KACTD,WAAYA,EACZ1D,OA9EM,IA+END,MA9EK,SAiFT,qBAAKuF,MAAO,CAAEoC,WAAY,QAA1B,SACG9D,GAAYzC,EAAYyC,KAE3B,8BAAMD,GAAWxC,EAAYwC,WAhC9B,gDCjDIqF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.6211e42a.chunk.js","sourcesContent":["import * as d3 from 'd3'\nimport { HierarchyNode, HierarchyRectangularNode } from 'd3'\nimport fileSize from 'filesize'\nimport { basename, extname } from 'path'\nimport ColorHash from 'color-hash'\n\nexport const x = 2\n\nexport const getHierarchy: (\n  data: FsNode[],\n  width: number,\n  height: number\n) => HierarchyRectangularNode<FsNode> = (data, width, height) => {\n  const h = d3\n    .stratify<FsNode>()\n    .id((d) => d.id)\n    .parentId((d) => d.id.substring(0, d.id.lastIndexOf('/')))(data)\n\n  h.each((node) => {\n    if (node.children) {\n      node.data.value = 0\n    }\n  })\n\n  const summed = h\n    .sum((d) => d.value * 1000)\n    .sort((a, b) => b.value! - a.value!)\n\n  const root: HierarchyRectangularNode<FsNode> = d3\n    .treemap<FsNode>()\n    .size([width, height])\n    // .padding(1)\n    .round(true)(summed)\n  return root\n}\n\nexport const getFsNode = (r: any) => {\n  const fsNode: FsNode = {\n    id: r.id,\n    value: r.value,\n  }\n  return fsNode\n}\n\nexport interface FsNode {\n  id: string\n  value: number\n}\n\nexport const displayNode = (node: HierarchyNode<FsNode>, base?: boolean) =>\n  `(${fileSize(node.value!)}) ${base ? basename(node.data.id) : node.data.id}`\n\nconst colorHash = new ColorHash()\nconst getColor = (filename: string) => {\n  return colorHash.hex(extname(filename))\n}\n\nexport const drawNode = (\n  node: HierarchyRectangularNode<FsNode>,\n  context: CanvasRenderingContext2D,\n  strokeStyle: string = 'rgba(0,0,0,0.2)',\n  lineWidth: number = 0.3,\n  fill: boolean = true\n) => {\n  context.save() // For clipping the text\n  context.beginPath()\n  context.rect(\n    node.x0 + lineWidth,\n    node.y0 + lineWidth,\n    node.x1 - node.x0 - 2 * lineWidth,\n    node.y1 - node.y0 - 2 * lineWidth\n  )\n\n  if (fill) {\n    context.fillStyle = getColor(node.data.id)\n    context.fill()\n  }\n  context.lineWidth = lineWidth\n  context.strokeStyle = strokeStyle\n  context.stroke()\n  context.restore()\n}\n\nexport const drawTree = (\n  root: HierarchyRectangularNode<FsNode>,\n  context: CanvasRenderingContext2D\n) => {\n  const leaves = root.leaves()\n\n  leaves.forEach((leaf) => {\n    drawNode(leaf, context)\n  })\n}\n\nexport const getPixelLookup = (data: HierarchyRectangularNode<FsNode>) => {\n  const leaves = data.leaves()\n\n  const lookup: HierarchyRectangularNode<FsNode>[][] = [\n    ...new Array(data.x1 - data.x0),\n  ].map((row) => new Array<HierarchyRectangularNode<FsNode>>(data.y1 - data.y0))\n\n  leaves.forEach((leaf) => {\n    for (let y = leaf.y0; y < leaf.y1; y++) {\n      for (let x = leaf.x0; x < leaf.x1; x++) {\n        lookup[y][x] = leaf\n      }\n    }\n  })\n\n  return lookup\n}\n","// https://observablehq.com/@d3/stratify-treemap?collection=@d3/d3-hierarchy\n// https://observablehq.com/@pstuffa/canvas-treemap\nimport React, { useEffect, useRef } from 'react'\n\nimport { HierarchyRectangularNode } from 'd3'\nimport { drawNode, drawTree, FsNode } from './lib'\n\ninterface CP {\n  data: HierarchyRectangularNode<FsNode>\n  pixelLookup: HierarchyRectangularNode<FsNode>[][]\n  height: number\n  width: number\n  hovered: HierarchyRectangularNode<FsNode> | null\n  setHovered: (node: HierarchyRectangularNode<FsNode> | null) => void\n  selected: HierarchyRectangularNode<FsNode> | null\n  setSelected: (node: HierarchyRectangularNode<FsNode> | null) => void\n}\n\nfunction usePrevious(value: any) {\n  const ref = useRef<HierarchyRectangularNode<FsNode> | null>(null)\n  useEffect(() => {\n    ref.current = value\n  })\n  return ref.current\n}\n\nconst Canvas: React.FC<CP> = ({\n  data,\n  pixelLookup,\n  hovered,\n  setHovered,\n  selected,\n  setSelected,\n  height,\n  width,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const [context, setContext] = React.useState<CanvasRenderingContext2D | null>(\n    null\n  )\n\n  const prevSelected = usePrevious(selected)\n\n  useEffect(() => {\n    if (!context) {\n      return\n    }\n\n    if (prevSelected) {\n      drawTree(prevSelected, context)\n    }\n\n    if (selected) {\n      drawNode(selected, context, 'yellow', 2.0, false)\n    }\n  }, [prevSelected, selected, context])\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const renderCtx = canvasRef.current.getContext('2d')\n\n      if (renderCtx) {\n        setContext(renderCtx)\n      }\n    }\n\n    if (context && data) {\n      drawTree(data, context)\n    }\n  }, [context, data, height, width])\n\n  const getNode = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    // https://stackoverflow.com/questions/17130395/real-mouse-position-in-canvas\n    const canvas = canvasRef.current!\n    const rect = canvas.getBoundingClientRect()\n    const scaleX = canvas.width / rect.width // relationship bitmap vs. element for X\n    const scaleY = canvas.height / rect.height // relationship bitmap vs. element for Y\n    const loc = {\n      x: Math.round((event.clientX - rect.left) * scaleX),\n      y: Math.round((event.clientY - rect.top) * scaleY),\n    }\n\n    const row = pixelLookup[loc.y]\n    if (!row) {\n      return\n    }\n\n    const node = row[loc.x]\n    return node\n  }\n\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n      }}\n    >\n      <canvas\n        onClick={(event) => {\n          setSelected(getNode(event) || null)\n        }}\n        onMouseMove={(event) => {\n          setHovered(getNode(event) || null)\n        }}\n        id=\"canvas\"\n        ref={canvasRef}\n        width={width}\n        height={height}\n        style={{\n          border: '2px solid #000',\n          cursor: 'pointer',\n        }}\n      ></canvas>\n    </div>\n  )\n}\n\nexport default React.memo(Canvas)\n","import { HierarchyRectangularNode } from 'd3'\nimport React, { useEffect, useRef } from 'react'\nimport { FC } from 'react'\nimport {\n  FixedSizeNodeData,\n  FixedSizeNodePublicState,\n  FixedSizeTree,\n  TreeWalker,\n  TreeWalkerValue,\n} from 'react-vtree'\nimport { NodeComponentProps } from 'react-vtree/dist/es/Tree'\nimport { displayNode, FsNode } from './lib'\n\ntype TreeData = FixedSizeNodeData &\n  Readonly<{\n    isLeaf: boolean\n    name: string\n    nestingLevel: number\n    isSelected: boolean\n    node: HierarchyRectangularNode<FsNode>\n  }>\n\nconst defaultButtonStyle = { fontFamily: 'Courier New' }\n\ntype NodeMeta = Readonly<{\n  node: HierarchyRectangularNode<FsNode>\n}>\n\ntype NVProps = Readonly<{\n  data: HierarchyRectangularNode<FsNode>\n  height: number\n  width: number\n  selected: HierarchyRectangularNode<FsNode> | null\n  setSelected: (node: HierarchyRectangularNode<FsNode> | null) => void\n}>\n\nconst NodeViewer = ({\n  data,\n  height,\n  width,\n  selected,\n  setSelected,\n}: NVProps) => {\n  const r = useRef<FixedSizeTree>(null)\n\n  useEffect(() => {\n    if (r.current && selected) {\n      r.current?.recomputeTree({\n        [data.data.id]: {\n          open: true,\n          subtreeCallback: (node, ownerNode) => {\n            node.isOpen = selected.data.id.startsWith(node.data.id) && selected.data.id !== node.data.id\n          },\n        },\n      })\n      r.current.scrollToItem(selected.data.id)\n    }\n  }, [selected, data])\n\n  const getNodeData = (\n    node: HierarchyRectangularNode<FsNode>\n  ): TreeWalkerValue<TreeData, NodeMeta> => ({\n    data: {\n      id: node.data.id,\n      isLeaf: node.children === undefined,\n      isOpenByDefault: node.parent === null,\n      name: displayNode(node, true),\n      nestingLevel: node.depth,\n      isSelected: !!selected && selected.data.id === node.data.id,\n      node,\n    },\n    node,\n  })\n\n  const Node: FC<\n    NodeComponentProps<TreeData, FixedSizeNodePublicState<TreeData>>\n  > = ({\n    data: { isLeaf, name, nestingLevel, isSelected, node },\n    isOpen,\n    style,\n    setOpen,\n  }) => (\n    <div\n      style={{\n        ...style,\n        alignItems: 'center',\n        display: 'flex',\n        marginLeft: nestingLevel * 30 + (isLeaf ? 48 : 0),\n        fontWeight: isSelected ? 'bold' : 'normal',\n        backgroundColor: isSelected ? 'yellow' : 'white',\n      }}\n    >\n      {!isLeaf && (\n        <div>\n          <button\n            type=\"button\"\n            onClick={() => {\n              r.current?.recomputeTree({\n                [node.data.id]: {\n                  open: !isOpen,\n                  subtreeCallback: (node, ownerNode) => {\n                    if (node !== ownerNode) {\n                      node.isOpen = false\n                    }\n                  },\n                },\n              })\n            }}\n            style={defaultButtonStyle}\n          >\n            {isOpen ? 'V' : '>'}\n          </button>\n        </div>\n      )}\n      <div\n        onClick={() => setSelected(node)}\n        style={{\n          marginLeft: 10,\n          cursor: 'pointer',\n          color: 'blue',\n          textDecoration: 'underline',\n        }}\n      >\n        {name}\n      </div>\n    </div>\n  )\n\n  function* treeWalker(): ReturnType<TreeWalker<TreeData, NodeMeta>> {\n    yield getNodeData(data)\n\n    while (true) {\n      const parentMeta = yield\n\n      for (const child of parentMeta.node.children || []) {\n        yield getNodeData(child)\n      }\n    }\n  }\n  return (\n    <FixedSizeTree\n      treeWalker={treeWalker}\n      itemSize={20}\n      height={height}\n      width={width}\n      ref={r}\n    >\n      {Node as any}\n    </FixedSizeTree>\n  )\n}\n\nexport default React.memo(NodeViewer)\n","import axios from 'axios'\nimport * as d3 from 'd3'\nimport { HierarchyRectangularNode } from 'd3'\nimport React, { useEffect } from 'react'\nimport Canvas from './Canvas'\nimport { displayNode, FsNode, getHierarchy, getPixelLookup } from './lib'\nimport NodeViewer from './NodeViewer'\nimport AutoSizer from 'react-virtualized-auto-sizer'\nconst DATA_FILE = 'du.txt'\n\nconst treemapHeight = 700\nconst treemapWidth = 700\n\nexport const App = () => {\n  const [\n    data,\n    setData,\n  ] = React.useState<HierarchyRectangularNode<FsNode> | null>(null)\n  const [pixelLookup, setPixelLookup] = React.useState<\n    HierarchyRectangularNode<FsNode>[][] | null\n  >(null)\n  const [err, setErr] = React.useState<string | null>(null)\n  const [\n    hovered,\n    setHovered,\n  ] = React.useState<HierarchyRectangularNode<FsNode> | null>(null)\n  const [\n    selected,\n    setSelected,\n  ] = React.useState<HierarchyRectangularNode<FsNode> | null>(null)\n\n  useEffect(() => {\n    console.log(selected)\n  }, [selected])\n\n  useEffect(() => {\n    const load = async () => {\n      const resp = await axios.get(DATA_FILE)\n      if (resp.status !== 200) {\n        setErr(`Failed to get ${DATA_FILE} with status ${resp.status}`)\n        return\n      }\n      const text = resp.data\n      const d = d3.tsvParse(`value\\tid\\n${text}`)\n      if (!d?.length || d.length < 2) {\n        setErr(`failed to find tsv formatted data in ${DATA_FILE}`)\n      }\n      const df = getHierarchy(\n        (d as unknown) as FsNode[],\n        treemapWidth,\n        treemapHeight\n      )\n      setPixelLookup(getPixelLookup(df))\n      setData(df)\n    }\n    load()\n  }, [])\n\n  if (err) {\n    return <>{err}</>\n  }\n\n  if (!(data && pixelLookup)) {\n    return <>Loading</>\n  }\n\n  return (\n    <AutoSizer\n      style={{ height: 'calc(100vh - 20px)', width: 'calc(100vw - 20px)' }}\n    >\n      {({ height, width }) => {\n        return (\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <div style={{ display: 'flex' }}>\n              <NodeViewer\n                data={data}\n                height={treemapHeight}\n                width={width - 50}\n                selected={selected}\n                setSelected={setSelected}\n              />\n              <Canvas\n                data={data}\n                pixelLookup={pixelLookup}\n                selected={selected}\n                setSelected={setSelected}\n                hovered={null}\n                setHovered={setHovered}\n                height={treemapHeight}\n                width={treemapWidth}\n              />\n            </div>\n            <div style={{ fontWeight: 'bold' }}>\n              {selected && displayNode(selected)}\n            </div>\n            <div>{hovered && displayNode(hovered)}</div>\n          </div>\n        )\n      }}\n    </AutoSizer>\n  )\n}\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}